// ============================================================================
// Copyright (c) 2011 by Terasic Technologies Inc. 
// ============================================================================
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// ============================================================================
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// ============================================================================
// Major Functions/Design Description:
//
//   Please refer to DE0_NANO_SDRAM_Nios_Test_User_manual.pdf in DE0_NANO_SDRAM_Nios_Test system CD.
//
// ============================================================================
// Revision History:
// ============================================================================
//   Ver.: |Author:   |Mod. Date:    |Changes Made:
//   V1.0  |EricChen  |02/01/2011    |
// ============================================================================

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_NANO_SDRAM_Nios_Test (

    //////////// CLOCK //////////
    CLOCK_50,

    //////////// LED //////////
    LED,

    //////////// KEY //////////
    KEY,

    //////////// SW //////////
    SW,

    //////////// SDRAM //////////
    DRAM_ADDR,
    DRAM_BA,
    DRAM_CAS_N,
    DRAM_CKE,
    DRAM_CLK,
    DRAM_CS_N,
    DRAM_DQ,
    DRAM_DQM,
    DRAM_RAS_N,
    DRAM_WE_N,

    //////////// EPCS //////////
    EPCS_ASDO,
    EPCS_DATA0,
    EPCS_DCLK,
    EPCS_NCSO,

    //////////// Accelerometer and EEPROM //////////
    G_SENSOR_CS_N,
    G_SENSOR_INT,
    I2C_SCLK,
    I2C_SDAT,

    //////////// ADC //////////
    ADC_CS_N,
    ADC_SADDR,
    ADC_SCLK,
    ADC_SDAT,

    //////////// 2x13 GPIO Header //////////
    GPIO_2,
    GPIO_2_IN,

    //////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
    GPIO_0_D,
    GPIO_0_IN,

    //////////// GPIO_0, GPIO_1 connect to GPIO Default //////////
    GPIO_1_D,
    GPIO_1_IN

);

  //=======================================================
  //  PARAMETER declarations
  //=======================================================


  //=======================================================
  //  PORT declarations
  //=======================================================

  //////////// CLOCK //////////
  input CLOCK_50;

  //////////// LED //////////
  output [7:0] LED;

  //////////// KEY //////////
  input [1:0] KEY;

  //////////// SW //////////
  input [3:0] SW;

  //////////// SDRAM //////////
  output [12:0] DRAM_ADDR;
  output [1:0] DRAM_BA;
  output DRAM_CAS_N;
  output DRAM_CKE;
  output DRAM_CLK;
  output DRAM_CS_N;
  inout [15:0] DRAM_DQ;
  output [1:0] DRAM_DQM;
  output DRAM_RAS_N;
  output DRAM_WE_N;

  //////////// EPCS //////////
  output EPCS_ASDO;
  input EPCS_DATA0;
  output EPCS_DCLK;
  output EPCS_NCSO;

  //////////// Accelerometer and EEPROM //////////
  output G_SENSOR_CS_N;
  input G_SENSOR_INT;
  output I2C_SCLK;
  inout I2C_SDAT;

  //////////// ADC //////////
  output ADC_CS_N;
  output ADC_SADDR;
  output ADC_SCLK;
  input ADC_SDAT;

  //////////// 2x13 GPIO Header //////////
  inout [12:0] GPIO_2;
  input [2:0] GPIO_2_IN;

  //////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
  inout [33:0] GPIO_0_D;
  input [1:0] GPIO_0_IN;

  //////////// GPIO_0, GPIO_1 connect to GPIO Default //////////
  inout [33:0] GPIO_1_D;
  input [1:0] GPIO_1_IN;

  wire unused, un2;
  wire [ 7:0] pio_w5x00_external_connection_export;
  wire [15:0] pio_missile_id_external_connection_export;

  assign GPIO_0_D[7] = pio_w5x00_external_connection_export[1];
  assign GPIO_0_D[3]  = pio_w5x00_external_connection_export[0];
  assign LED[0]       = pio_w5x00_external_connection_export[0];
  assign LED[1]       = pio_w5x00_external_connection_export[1];
  assign LED[2]       = pio_w5x00_external_connection_export[2];

  wire [15:0] debouncing_0_conduit_end_d_in;
  // assign pio_missile_id_external_connection_export = {6'b0, SW};
  assign debouncing_0_conduit_end_d_in = {
    GPIO_0_D[8],
    GPIO_0_D[12],
    GPIO_0_D[16],
    GPIO_0_D[20],
    GPIO_0_D[24],
    GPIO_0_D[28],
    GPIO_0_D[31],
    GPIO_0_D[33],
    GPIO_0_D[9],
    GPIO_0_D[10],
    GPIO_0_D[14],
    GPIO_0_D[18],
    GPIO_0_D[22],
    GPIO_0_D[26],
    GPIO_0_D[30],
    GPIO_0_D[32]
  };

  wire [15:0] misile_id_emu_external_connection_export;

 // assign {
 //   GPIO_1_D[18],
 //   GPIO_1_D[20],
 //   GPIO_1_D[22],
 //   GPIO_1_D[24],
 //   GPIO_1_D[26],
 //   GPIO_1_D[28],
 //   GPIO_1_D[30],
 //  GPIO_1_D[32],
 //   GPIO_0_D[18],
 //   GPIO_0_D[20],
 //   GPIO_0_D[22],
 //   GPIO_0_D[24],
 //   GPIO_0_D[26],
 //   GPIO_0_D[28],
 //   GPIO_0_D[30],
 //   GPIO_0_D[32]
 // } = misile_id_emu_external_connection_export;

  wire uart_selector_0_side_b_0_txd;
  wire uart_selector_0_side_b_0_rxd;
  wire uart_selector_0_side_b_1_txd;
  wire uart_selector_0_side_b_1_rxd;
  
  assign uart_selector_0_side_b_0_rxd = GPIO_0_D[2];
  assign uart_selector_0_side_b_1_rxd = GPIO_0_D[6];
  // assign GPIO_0_IN[1] = uart_selector_0_side_b_1_txd;
  assign GPIO_0_D[4] = uart_selector_0_side_b_1_txd;

  DE0_NANO_QSYS u0 (
      .clk_clk                     (CLOCK_50),    //                      clk.clk
      .reset_reset_n               (1'b1),        //                    reset.reset_n
      .altpll_sdram_clk            (DRAM_CLK),    //             altpll_sdram.clk
      .altpll_areset_conduit_export(1'b0),        //    altpll_areset_conduit.export
      .sdram_wire_addr             (DRAM_ADDR),   //               sdram_wire.addr
      .sdram_wire_ba               (DRAM_BA),     //                         .ba
      .sdram_wire_cas_n            (DRAM_CAS_N),  //                         .cas_n
      .sdram_wire_cke              (DRAM_CKE),    //                         .cke
      .sdram_wire_cs_n             (DRAM_CS_N),   //                         .cs_n
      .sdram_wire_dq               (DRAM_DQ),     //                         .dq
      .sdram_wire_dqm              (DRAM_DQM),    //                         .dqm
      .sdram_wire_ras_n            (DRAM_RAS_N),  //                         .ras_n
      .sdram_wire_we_n             (DRAM_WE_N),   //                         .we_n

      .spi_w5x00_external_MISO(GPIO_0_IN[0]),  //                   spi_0_external.MISO
      .spi_w5x00_external_MOSI(GPIO_0_D[1]),  //                                 .MOSI
      .spi_w5x00_external_SCLK(GPIO_0_D[0]),  //                                 .SCLK
      .spi_w5x00_external_SS_n(unused),       //                                 .SS_n

      .pio_w5x00_external_connection_export (pio_w5x00_external_connection_export), // w5x00_cs_rst_external_connection.export
      .pio_missile_id_external_connection_export    (pio_missile_id_external_connection_export),     //    w5x00_int_external_connection.export

      .debouncing_0_conduit_end_d_in (debouncing_0_conduit_end_d_in),
      .debouncing_0_conduit_end_d_out(pio_missile_id_external_connection_export),

      .uart_selector_0_side_b_0_txd(uart_selector_0_side_b_0_txd),
      .uart_selector_0_side_b_0_rxd(uart_selector_0_side_b_0_rxd),
      .uart_selector_0_side_b_1_txd(uart_selector_0_side_b_1_txd),
      .uart_selector_0_side_b_1_rxd(uart_selector_0_side_b_1_rxd),

      .epcs_flash_controller_0_external_dclk(EPCS_DCLK),  //   epcs_flash_controller_0_external.dclk
      .epcs_flash_controller_0_external_sce(EPCS_NCSO),  //                                   .sce
      .epcs_flash_controller_0_external_sdo(EPCS_ASDO),  //                                   .sdo
      .epcs_flash_controller_0_external_data0(EPCS_DATA0),  //  
      .misile_id_emu_external_connection_export(misile_id_emu_external_connection_export)
  );


endmodule
