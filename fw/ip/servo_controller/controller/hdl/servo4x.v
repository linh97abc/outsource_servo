// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="servo4x_servo4x,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.050250,HLS_SYN_LAT=39,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1059,HLS_SYN_LUT=831,HLS_VERSION=2022_2}" *)

module servo4x (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s0,
        s1,
        s2,
        s3,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [143:0] s0;
input  [143:0] s1;
input  [143:0] s2;
input  [143:0] s3;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] e1_V_address0;
reg    e1_V_ce0;
reg    e1_V_we0;
wire   [15:0] e1_V_d0;
wire   [15:0] e1_V_q0;
reg   [1:0] e2_V_address0;
reg    e2_V_ce0;
reg    e2_V_we0;
wire   [15:0] e2_V_q0;
reg   [1:0] u1_V_address0;
reg    u1_V_ce0;
wire   [47:0] u1_V_q0;
reg   [1:0] u1_V_address1;
reg    u1_V_ce1;
reg    u1_V_we1;
wire   [47:0] u1_V_q1;
wire   [15:0] s_umax_pos_V_0_fu_233_p1;
reg   [15:0] s_umax_pos_V_0_reg_833;
reg   [31:0] s_c0_V_0_reg_838;
reg   [31:0] s_c1_V_0_reg_843;
reg   [31:0] s_c2_V_0_reg_848;
reg   [15:0] s_sp_V_0_reg_853;
reg   [15:0] s_pv_V_0_reg_858;
wire   [15:0] s_umax_pos_V_1_fu_287_p1;
reg   [15:0] s_umax_pos_V_1_reg_863;
reg   [31:0] s_c0_V_1_reg_868;
reg   [31:0] s_c1_V_1_reg_873;
reg   [31:0] s_c2_V_1_reg_878;
reg   [15:0] s_sp_V_1_reg_883;
reg   [15:0] s_pv_V_1_reg_888;
wire   [15:0] s_umax_pos_V_2_fu_341_p1;
reg   [15:0] s_umax_pos_V_2_reg_893;
reg   [31:0] s_c0_V_2_reg_898;
reg   [31:0] s_c1_V_2_reg_903;
reg   [31:0] s_c2_V_2_reg_908;
reg   [15:0] s_sp_V_2_reg_913;
reg   [15:0] s_pv_V_2_reg_918;
wire   [15:0] s_umax_pos_V_3_fu_395_p1;
reg   [15:0] s_umax_pos_V_3_reg_923;
reg   [31:0] s_c0_V_3_reg_928;
reg   [31:0] s_c1_V_3_reg_933;
reg   [31:0] s_c2_V_3_reg_938;
reg   [15:0] s_sp_V_3_reg_943;
reg   [15:0] s_pv_V_3_reg_948;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln63_fu_464_p2;
reg   [1:0] e2_V_1_reg_961;
reg   [1:0] u1_V_1_reg_966;
wire  signed [15:0] e0_V_fu_500_p2;
reg  signed [15:0] e0_V_reg_972;
wire  signed [31:0] tmp_7_fu_517_p6;
reg  signed [31:0] tmp_7_reg_977;
wire  signed [31:0] tmp_8_fu_527_p6;
reg  signed [31:0] tmp_8_reg_982;
wire  signed [31:0] tmp_9_fu_537_p6;
reg  signed [31:0] tmp_9_reg_987;
wire   [11:0] trunc_ln838_fu_547_p1;
reg   [11:0] trunc_ln838_reg_992;
reg  signed [15:0] tmp_2_reg_997;
wire    ap_CS_fsm_state3;
reg  signed [15:0] tmp_V_reg_1002;
wire   [31:0] mul_ln813_i_fu_559_p2;
reg   [31:0] mul_ln813_i_reg_1007;
wire   [31:0] mul_ln813_1_i_fu_567_p2;
reg   [31:0] mul_ln813_1_i_reg_1012;
wire    ap_CS_fsm_state4;
wire   [31:0] mul_ln813_2_i_fu_575_p2;
reg   [31:0] mul_ln813_2_i_reg_1017;
wire   [47:0] u1_next_V_fu_662_p3;
reg   [47:0] u1_next_V_reg_1022;
wire    ap_CS_fsm_state5;
wire   [11:0] ret_V_8_fu_696_p3;
reg   [11:0] ret_V_8_reg_1027;
wire    ap_CS_fsm_state11;
wire   [11:0] ret_V_9_fu_730_p3;
reg   [11:0] ret_V_9_reg_1032;
wire   [63:0] zext_ln63_fu_457_p1;
reg   [2:0] i_fu_126;
wire   [2:0] add_ln63_fu_470_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
wire   [11:0] grp_fu_201_p4;
wire   [11:0] grp_fu_217_p4;
wire   [1:0] trunc_ln64_fu_476_p1;
wire   [15:0] tmp_1_fu_480_p6;
wire   [15:0] tmp_3_fu_490_p6;
wire   [15:0] tmp_5_fu_507_p6;
wire   [31:0] tmp1_fu_580_p2;
wire   [31:0] tmp3_i_fu_584_p2;
wire   [30:0] trunc_ln813_fu_597_p1;
wire   [47:0] tmp4_i_fu_589_p3;
wire   [46:0] trunc_ln813_1_fu_609_p1;
wire   [46:0] trunc_ln1_fu_601_p3;
wire   [43:0] u_ret_V_1_fu_625_p3;
wire   [47:0] u0_V_fu_613_p2;
wire  signed [47:0] sext_ln1649_fu_632_p1;
wire   [0:0] tmp_4_fu_642_p3;
wire   [46:0] add_ln39_fu_619_p2;
wire   [46:0] select_ln60_fu_650_p3;
wire   [0:0] icmp_ln1649_fu_636_p2;
wire   [47:0] zext_ln1649_fu_658_p1;
wire   [31:0] trunc_ln1003_fu_678_p1;
wire   [0:0] icmp_ln1003_fu_682_p2;
wire   [11:0] grp_fu_211_p2;
wire   [0:0] p_Result_s_fu_670_p3;
wire   [11:0] select_ln1002_fu_688_p3;
wire   [31:0] trunc_ln1003_1_fu_712_p1;
wire   [0:0] icmp_ln1003_1_fu_716_p2;
wire   [11:0] grp_fu_227_p2;
wire   [0:0] p_Result_1_fu_704_p3;
wire   [11:0] select_ln1002_1_fu_722_p3;
wire   [31:0] trunc_ln1003_2_fu_746_p1;
wire   [0:0] icmp_ln1003_2_fu_750_p2;
wire   [0:0] p_Result_2_fu_738_p3;
wire   [11:0] select_ln1002_2_fu_756_p3;
wire   [31:0] trunc_ln1003_3_fu_780_p1;
wire   [0:0] icmp_ln1003_3_fu_784_p2;
wire   [0:0] p_Result_3_fu_772_p3;
wire   [11:0] select_ln1002_3_fu_790_p3;
wire   [11:0] ret_V_11_fu_798_p3;
wire   [11:0] ret_V_10_fu_764_p3;
wire   [59:0] tmp_s_fu_806_p8;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

servo4x_e1_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
e1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e1_V_address0),
    .ce0(e1_V_ce0),
    .we0(e1_V_we0),
    .d0(e1_V_d0),
    .q0(e1_V_q0)
);

servo4x_e1_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
e2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e2_V_address0),
    .ce0(e2_V_ce0),
    .we0(e2_V_we0),
    .d0(e1_V_q0),
    .q0(e2_V_q0)
);

servo4x_u1_V_RAM_AUTO_1R1W #(
    .DataWidth( 48 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
u1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(u1_V_address0),
    .ce0(u1_V_ce0),
    .q0(u1_V_q0),
    .address1(u1_V_address1),
    .ce1(u1_V_ce1),
    .we1(u1_V_we1),
    .d1(u1_next_V_reg_1022),
    .q1(u1_V_q1)
);

servo4x_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U1(
    .din0(s_sp_V_0_reg_853),
    .din1(s_sp_V_1_reg_883),
    .din2(s_sp_V_2_reg_913),
    .din3(s_sp_V_3_reg_943),
    .din4(trunc_ln64_fu_476_p1),
    .dout(tmp_1_fu_480_p6)
);

servo4x_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U2(
    .din0(s_pv_V_0_reg_858),
    .din1(s_pv_V_1_reg_888),
    .din2(s_pv_V_2_reg_918),
    .din3(s_pv_V_3_reg_948),
    .din4(trunc_ln64_fu_476_p1),
    .dout(tmp_3_fu_490_p6)
);

servo4x_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U3(
    .din0(s_umax_pos_V_0_reg_833),
    .din1(s_umax_pos_V_1_reg_863),
    .din2(s_umax_pos_V_2_reg_893),
    .din3(s_umax_pos_V_3_reg_923),
    .din4(trunc_ln64_fu_476_p1),
    .dout(tmp_5_fu_507_p6)
);

servo4x_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U4(
    .din0(s_c0_V_0_reg_838),
    .din1(s_c0_V_1_reg_868),
    .din2(s_c0_V_2_reg_898),
    .din3(s_c0_V_3_reg_928),
    .din4(trunc_ln64_fu_476_p1),
    .dout(tmp_7_fu_517_p6)
);

servo4x_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U5(
    .din0(s_c1_V_0_reg_843),
    .din1(s_c1_V_1_reg_873),
    .din2(s_c1_V_2_reg_903),
    .din3(s_c1_V_3_reg_933),
    .din4(trunc_ln64_fu_476_p1),
    .dout(tmp_8_fu_527_p6)
);

servo4x_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U6(
    .din0(s_c2_V_0_reg_848),
    .din1(s_c2_V_1_reg_878),
    .din2(s_c2_V_2_reg_908),
    .din3(s_c2_V_3_reg_938),
    .din4(trunc_ln64_fu_476_p1),
    .dout(tmp_9_fu_537_p6)
);

servo4x_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U7(
    .din0(tmp_7_reg_977),
    .din1(e0_V_reg_972),
    .dout(mul_ln813_i_fu_559_p2)
);

servo4x_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U8(
    .din0(tmp_8_reg_982),
    .din1(tmp_2_reg_997),
    .dout(mul_ln813_1_i_fu_567_p2)
);

servo4x_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U9(
    .din0(tmp_9_reg_987),
    .din1(tmp_V_reg_1002),
    .dout(mul_ln813_2_i_fu_575_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_126 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln63_fu_464_p2 == 1'd0))) begin
        i_fu_126 <= add_ln63_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln63_fu_464_p2 == 1'd0))) begin
        e0_V_reg_972 <= e0_V_fu_500_p2;
        e2_V_1_reg_961 <= zext_ln63_fu_457_p1;
        tmp_7_reg_977 <= tmp_7_fu_517_p6;
        tmp_8_reg_982 <= tmp_8_fu_527_p6;
        tmp_9_reg_987 <= tmp_9_fu_537_p6;
        trunc_ln838_reg_992 <= trunc_ln838_fu_547_p1;
        u1_V_1_reg_966 <= zext_ln63_fu_457_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln813_1_i_reg_1012 <= mul_ln813_1_i_fu_567_p2;
        mul_ln813_2_i_reg_1017 <= mul_ln813_2_i_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln813_i_reg_1007 <= mul_ln813_i_fu_559_p2;
        tmp_2_reg_997 <= e1_V_q0;
        tmp_V_reg_1002 <= e2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ret_V_8_reg_1027 <= ret_V_8_fu_696_p3;
        ret_V_9_reg_1032 <= ret_V_9_fu_730_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        s_c0_V_0_reg_838 <= {{s0[47:16]}};
        s_c0_V_1_reg_868 <= {{s1[47:16]}};
        s_c0_V_2_reg_898 <= {{s2[47:16]}};
        s_c0_V_3_reg_928 <= {{s3[47:16]}};
        s_c1_V_0_reg_843 <= {{s0[79:48]}};
        s_c1_V_1_reg_873 <= {{s1[79:48]}};
        s_c1_V_2_reg_903 <= {{s2[79:48]}};
        s_c1_V_3_reg_933 <= {{s3[79:48]}};
        s_c2_V_0_reg_848 <= {{s0[111:80]}};
        s_c2_V_1_reg_878 <= {{s1[111:80]}};
        s_c2_V_2_reg_908 <= {{s2[111:80]}};
        s_c2_V_3_reg_938 <= {{s3[111:80]}};
        s_pv_V_0_reg_858 <= {{s0[143:128]}};
        s_pv_V_1_reg_888 <= {{s1[143:128]}};
        s_pv_V_2_reg_918 <= {{s2[143:128]}};
        s_pv_V_3_reg_948 <= {{s3[143:128]}};
        s_sp_V_0_reg_853 <= {{s0[127:112]}};
        s_sp_V_1_reg_883 <= {{s1[127:112]}};
        s_sp_V_2_reg_913 <= {{s2[127:112]}};
        s_sp_V_3_reg_943 <= {{s3[127:112]}};
        s_umax_pos_V_0_reg_833 <= s_umax_pos_V_0_fu_233_p1;
        s_umax_pos_V_1_reg_863 <= s_umax_pos_V_1_fu_287_p1;
        s_umax_pos_V_2_reg_893 <= s_umax_pos_V_2_fu_341_p1;
        s_umax_pos_V_3_reg_923 <= s_umax_pos_V_3_fu_395_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        u1_next_V_reg_1022 <= u1_next_V_fu_662_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln63_fu_464_p2 == 1'd0))) begin
        e1_V_ce0 = 1'b1;
    end else begin
        e1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln63_fu_464_p2 == 1'd0))) begin
        e1_V_we0 = 1'b1;
    end else begin
        e1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e2_V_address0 = e2_V_1_reg_961;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        e2_V_address0 = zext_ln63_fu_457_p1;
    end else begin
        e2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        e2_V_ce0 = 1'b1;
    end else begin
        e2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e2_V_we0 = 1'b1;
    end else begin
        e2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        u1_V_address0 = 2'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        u1_V_address0 = u1_V_1_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u1_V_address0 = 2'd1;
    end else begin
        u1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        u1_V_address1 = 2'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        u1_V_address1 = u1_V_1_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u1_V_address1 = 2'd0;
    end else begin
        u1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        u1_V_ce0 = 1'b1;
    end else begin
        u1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2))) begin
        u1_V_ce1 = 1'b1;
    end else begin
        u1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        u1_V_we1 = 1'b1;
    end else begin
        u1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln63_fu_464_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_fu_619_p2 = (trunc_ln813_1_fu_609_p1 + trunc_ln1_fu_601_p3);

assign add_ln63_fu_470_p2 = (i_fu_126 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = tmp_s_fu_806_p8;

assign e0_V_fu_500_p2 = (tmp_1_fu_480_p6 - tmp_3_fu_490_p6);

assign e1_V_address0 = zext_ln63_fu_457_p1;

assign e1_V_d0 = (tmp_1_fu_480_p6 - tmp_3_fu_490_p6);

assign grp_fu_201_p4 = {{u1_V_q1[43:32]}};

assign grp_fu_211_p2 = (grp_fu_201_p4 + 12'd1);

assign grp_fu_217_p4 = {{u1_V_q0[43:32]}};

assign grp_fu_227_p2 = (grp_fu_217_p4 + 12'd1);

assign icmp_ln1003_1_fu_716_p2 = ((trunc_ln1003_1_fu_712_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1003_2_fu_750_p2 = ((trunc_ln1003_2_fu_746_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1003_3_fu_784_p2 = ((trunc_ln1003_3_fu_780_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1003_fu_682_p2 = ((trunc_ln1003_fu_678_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1649_fu_636_p2 = (($signed(u0_V_fu_613_p2) > $signed(sext_ln1649_fu_632_p1)) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_464_p2 = ((i_fu_126 == 3'd4) ? 1'b1 : 1'b0);

assign p_Result_1_fu_704_p3 = u1_V_q0[32'd47];

assign p_Result_2_fu_738_p3 = u1_V_q1[32'd47];

assign p_Result_3_fu_772_p3 = u1_V_q0[32'd47];

assign p_Result_s_fu_670_p3 = u1_V_q1[32'd47];

assign ret_V_10_fu_764_p3 = ((p_Result_2_fu_738_p3[0:0] == 1'b1) ? select_ln1002_2_fu_756_p3 : grp_fu_201_p4);

assign ret_V_11_fu_798_p3 = ((p_Result_3_fu_772_p3[0:0] == 1'b1) ? select_ln1002_3_fu_790_p3 : grp_fu_217_p4);

assign ret_V_8_fu_696_p3 = ((p_Result_s_fu_670_p3[0:0] == 1'b1) ? select_ln1002_fu_688_p3 : grp_fu_201_p4);

assign ret_V_9_fu_730_p3 = ((p_Result_1_fu_704_p3[0:0] == 1'b1) ? select_ln1002_1_fu_722_p3 : grp_fu_217_p4);

assign s_umax_pos_V_0_fu_233_p1 = s0[15:0];

assign s_umax_pos_V_1_fu_287_p1 = s1[15:0];

assign s_umax_pos_V_2_fu_341_p1 = s2[15:0];

assign s_umax_pos_V_3_fu_395_p1 = s3[15:0];

assign select_ln1002_1_fu_722_p3 = ((icmp_ln1003_1_fu_716_p2[0:0] == 1'b1) ? grp_fu_217_p4 : grp_fu_227_p2);

assign select_ln1002_2_fu_756_p3 = ((icmp_ln1003_2_fu_750_p2[0:0] == 1'b1) ? grp_fu_201_p4 : grp_fu_211_p2);

assign select_ln1002_3_fu_790_p3 = ((icmp_ln1003_3_fu_784_p2[0:0] == 1'b1) ? grp_fu_217_p4 : grp_fu_227_p2);

assign select_ln1002_fu_688_p3 = ((icmp_ln1003_fu_682_p2[0:0] == 1'b1) ? grp_fu_201_p4 : grp_fu_211_p2);

assign select_ln60_fu_650_p3 = ((tmp_4_fu_642_p3[0:0] == 1'b1) ? 47'd0 : add_ln39_fu_619_p2);

assign sext_ln1649_fu_632_p1 = $signed(u_ret_V_1_fu_625_p3);

assign tmp1_fu_580_p2 = (mul_ln813_i_reg_1007 + mul_ln813_2_i_reg_1017);

assign tmp3_i_fu_584_p2 = (tmp1_fu_580_p2 + mul_ln813_1_i_reg_1012);

assign tmp4_i_fu_589_p3 = {{tmp3_i_fu_584_p2}, {16'd0}};

assign tmp_4_fu_642_p3 = u0_V_fu_613_p2[32'd47];

assign tmp_s_fu_806_p8 = {{{{{{{ret_V_11_fu_798_p3}, {4'd0}}, {ret_V_10_fu_764_p3}}, {4'd0}}, {ret_V_9_reg_1032}}, {4'd0}}, {ret_V_8_reg_1027}};

assign trunc_ln1003_1_fu_712_p1 = u1_V_q0[31:0];

assign trunc_ln1003_2_fu_746_p1 = u1_V_q1[31:0];

assign trunc_ln1003_3_fu_780_p1 = u1_V_q0[31:0];

assign trunc_ln1003_fu_678_p1 = u1_V_q1[31:0];

assign trunc_ln1_fu_601_p3 = {{trunc_ln813_fu_597_p1}, {16'd0}};

assign trunc_ln64_fu_476_p1 = i_fu_126[1:0];

assign trunc_ln813_1_fu_609_p1 = u1_V_q0[46:0];

assign trunc_ln813_fu_597_p1 = tmp3_i_fu_584_p2[30:0];

assign trunc_ln838_fu_547_p1 = tmp_5_fu_507_p6[11:0];

assign u0_V_fu_613_p2 = (u1_V_q0 + tmp4_i_fu_589_p3);

assign u1_next_V_fu_662_p3 = ((icmp_ln1649_fu_636_p2[0:0] == 1'b1) ? sext_ln1649_fu_632_p1 : zext_ln1649_fu_658_p1);

assign u_ret_V_1_fu_625_p3 = {{trunc_ln838_reg_992}, {32'd0}};

assign zext_ln1649_fu_658_p1 = select_ln60_fu_650_p3;

assign zext_ln63_fu_457_p1 = i_fu_126;

endmodule //servo4x
