// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="servo_u_to_duty_servo_u_to_duty,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.133714,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=159,HLS_SYN_LUT=276,HLS_VERSION=2022_2}" *)

module servo_u_to_duty (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        half_period,
        in_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] half_period;
input  [63:0] in_r;
output  [95:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] in_u_V_0_fu_182_p1;
reg   [15:0] in_u_V_0_reg_541;
reg   [15:0] in_u_V_1_reg_546;
reg   [15:0] in_u_V_2_reg_551;
reg   [15:0] in_u_V_3_reg_556;
wire   [26:0] zext_ln1273_fu_220_p1;
reg   [26:0] zext_ln1273_reg_561;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln44_fu_232_p2;
wire   [0:0] icmp_ln27_fu_300_p2;
reg   [0:0] icmp_ln27_reg_574;
wire   [0:0] icmp_ln27_1_fu_306_p2;
reg   [0:0] icmp_ln27_1_reg_579;
wire   [0:0] icmp_ln27_2_fu_312_p2;
reg   [0:0] icmp_ln27_2_reg_584;
wire   [0:0] or_ln27_1_fu_324_p2;
reg   [0:0] or_ln27_1_reg_589;
wire   [0:0] ret_direction_V_3_fu_330_p3;
reg   [0:0] ret_direction_V_3_reg_594;
wire   [0:0] ret_direction_V_3_2_fu_338_p3;
reg   [0:0] ret_direction_V_3_2_reg_599;
wire   [0:0] ret_direction_V_3_3_fu_346_p3;
reg   [0:0] ret_direction_V_3_3_reg_604;
wire   [0:0] ret_direction_V_3_4_fu_354_p3;
reg   [0:0] ret_direction_V_3_4_reg_609;
reg   [0:0] ret_direction_V_3_083_reg_126;
wire    ap_CS_fsm_state5;
reg   [0:0] ret_direction_V_2_082_reg_137;
reg   [0:0] ret_direction_V_1_081_reg_148;
reg   [0:0] ret_direction_V_0_080_reg_159;
reg   [2:0] i_fu_94;
wire   [2:0] add_ln44_fu_238_p2;
reg   [14:0] ret_duty_V_3_1_fu_98;
wire   [14:0] ret_duty_V_3_11_fu_475_p3;
reg   [14:0] ret_duty_V_3_2_fu_102;
wire   [14:0] ret_duty_V_3_10_fu_468_p3;
reg   [14:0] ret_duty_V_3_3_fu_106;
wire   [14:0] ret_duty_V_3_9_fu_461_p3;
reg   [14:0] ret_duty_V_3_4_fu_110;
wire   [14:0] ret_duty_V_3_fu_454_p3;
wire   [14:0] half_period_V_fu_216_p1;
wire   [1:0] trunc_ln818_fu_244_p1;
wire   [15:0] tmp_1_fu_248_p6;
wire   [11:0] u0_V_fu_258_p4;
wire   [0:0] tmp_fu_268_p3;
wire   [11:0] u0_V_1_fu_276_p2;
wire  signed [11:0] u0_V_3_fu_288_p3;
wire   [0:0] or_ln27_fu_318_p2;
wire   [0:0] ret_direction_V_0_fu_282_p2;
wire   [15:0] zext_ln48_fu_367_p1;
wire   [88:0] tmp_4_fu_371_p15;
wire  signed [26:0] grp_fu_502_p2;
wire   [11:0] trunc_ln1003_fu_423_p1;
wire   [14:0] ret_V_fu_407_p4;
wire   [0:0] icmp_ln1003_fu_426_p2;
wire   [14:0] ret_V_1_fu_432_p2;
wire   [0:0] p_Result_s_fu_416_p3;
wire   [14:0] select_ln1002_fu_438_p3;
wire   [14:0] ret_duty_V_0_fu_446_p3;
wire   [14:0] grp_fu_502_p0;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

servo_u_to_duty_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U1(
    .din0(in_u_V_0_reg_541),
    .din1(in_u_V_1_reg_546),
    .din2(in_u_V_2_reg_551),
    .din3(in_u_V_3_reg_556),
    .din4(trunc_ln818_fu_244_p1),
    .dout(tmp_1_fu_248_p6)
);

servo_u_to_duty_mul_mul_15ns_12s_27_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 27 ))
mul_mul_15ns_12s_27_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_502_p0),
    .din1(u0_V_3_fu_288_p3),
    .ce(1'b1),
    .dout(grp_fu_502_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_94 <= 3'd0;
    end else if (((icmp_ln44_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_94 <= add_ln44_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln27_1_reg_579 <= icmp_ln27_1_fu_306_p2;
        icmp_ln27_2_reg_584 <= icmp_ln27_2_fu_312_p2;
        icmp_ln27_reg_574 <= icmp_ln27_fu_300_p2;
        or_ln27_1_reg_589 <= or_ln27_1_fu_324_p2;
        ret_direction_V_3_2_reg_599 <= ret_direction_V_3_2_fu_338_p3;
        ret_direction_V_3_3_reg_604 <= ret_direction_V_3_3_fu_346_p3;
        ret_direction_V_3_4_reg_609 <= ret_direction_V_3_4_fu_354_p3;
        ret_direction_V_3_reg_594 <= ret_direction_V_3_fu_330_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in_u_V_0_reg_541 <= in_u_V_0_fu_182_p1;
        in_u_V_1_reg_546 <= {{in_r[31:16]}};
        in_u_V_2_reg_551 <= {{in_r[47:32]}};
        in_u_V_3_reg_556 <= {{in_r[63:48]}};
        zext_ln1273_reg_561[14 : 0] <= zext_ln1273_fu_220_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_direction_V_0_080_reg_159 <= ret_direction_V_3_4_reg_609;
        ret_direction_V_1_081_reg_148 <= ret_direction_V_3_3_reg_604;
        ret_direction_V_2_082_reg_137 <= ret_direction_V_3_2_reg_599;
        ret_direction_V_3_083_reg_126 <= ret_direction_V_3_reg_594;
        ret_duty_V_3_1_fu_98 <= ret_duty_V_3_11_fu_475_p3;
        ret_duty_V_3_2_fu_102 <= ret_duty_V_3_10_fu_468_p3;
        ret_duty_V_3_3_fu_106 <= ret_duty_V_3_9_fu_461_p3;
        ret_duty_V_3_4_fu_110 <= ret_duty_V_3_fu_454_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln44_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln44_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_238_p2 = (i_fu_94 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = tmp_4_fu_371_p15;

assign grp_fu_502_p0 = zext_ln1273_reg_561;

assign half_period_V_fu_216_p1 = half_period[14:0];

assign icmp_ln1003_fu_426_p2 = ((trunc_ln1003_fu_423_p1 == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_306_p2 = ((trunc_ln818_fu_244_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln27_2_fu_312_p2 = ((trunc_ln818_fu_244_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_300_p2 = ((trunc_ln818_fu_244_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_232_p2 = ((i_fu_94 == 3'd4) ? 1'b1 : 1'b0);

assign in_u_V_0_fu_182_p1 = in_r[15:0];

assign or_ln27_1_fu_324_p2 = (or_ln27_fu_318_p2 | icmp_ln27_fu_300_p2);

assign or_ln27_fu_318_p2 = (icmp_ln27_2_fu_312_p2 | icmp_ln27_1_fu_306_p2);

assign p_Result_s_fu_416_p3 = grp_fu_502_p2[32'd26];

assign ret_V_1_fu_432_p2 = (ret_V_fu_407_p4 + 15'd1);

assign ret_V_fu_407_p4 = {{grp_fu_502_p2[26:12]}};

assign ret_direction_V_0_fu_282_p2 = (tmp_fu_268_p3 ^ 1'd1);

assign ret_direction_V_3_2_fu_338_p3 = ((icmp_ln27_2_fu_312_p2[0:0] == 1'b1) ? ret_direction_V_0_fu_282_p2 : ret_direction_V_2_082_reg_137);

assign ret_direction_V_3_3_fu_346_p3 = ((icmp_ln27_1_fu_306_p2[0:0] == 1'b1) ? ret_direction_V_0_fu_282_p2 : ret_direction_V_1_081_reg_148);

assign ret_direction_V_3_4_fu_354_p3 = ((icmp_ln27_fu_300_p2[0:0] == 1'b1) ? ret_direction_V_0_fu_282_p2 : ret_direction_V_0_080_reg_159);

assign ret_direction_V_3_fu_330_p3 = ((or_ln27_1_fu_324_p2[0:0] == 1'b1) ? ret_direction_V_3_083_reg_126 : ret_direction_V_0_fu_282_p2);

assign ret_duty_V_0_fu_446_p3 = ((p_Result_s_fu_416_p3[0:0] == 1'b1) ? select_ln1002_fu_438_p3 : ret_V_fu_407_p4);

assign ret_duty_V_3_10_fu_468_p3 = ((icmp_ln27_1_reg_579[0:0] == 1'b1) ? ret_duty_V_0_fu_446_p3 : ret_duty_V_3_2_fu_102);

assign ret_duty_V_3_11_fu_475_p3 = ((icmp_ln27_reg_574[0:0] == 1'b1) ? ret_duty_V_0_fu_446_p3 : ret_duty_V_3_1_fu_98);

assign ret_duty_V_3_9_fu_461_p3 = ((icmp_ln27_2_reg_584[0:0] == 1'b1) ? ret_duty_V_0_fu_446_p3 : ret_duty_V_3_3_fu_106);

assign ret_duty_V_3_fu_454_p3 = ((or_ln27_1_reg_589[0:0] == 1'b1) ? ret_duty_V_3_4_fu_110 : ret_duty_V_0_fu_446_p3);

assign select_ln1002_fu_438_p3 = ((icmp_ln1003_fu_426_p2[0:0] == 1'b1) ? ret_V_fu_407_p4 : ret_V_1_fu_432_p2);

assign tmp_4_fu_371_p15 = {{{{{{{{{{{{{{ret_direction_V_3_083_reg_126}, {7'd0}}, {ret_direction_V_2_082_reg_137}}, {7'd0}}, {ret_direction_V_1_081_reg_148}}, {7'd0}}, {ret_direction_V_0_080_reg_159}}, {zext_ln48_fu_367_p1}}, {1'd0}}, {ret_duty_V_3_3_fu_106}}, {1'd0}}, {ret_duty_V_3_2_fu_102}}, {1'd0}}, {ret_duty_V_3_1_fu_98}};

assign tmp_fu_268_p3 = tmp_1_fu_248_p6[32'd15];

assign trunc_ln1003_fu_423_p1 = grp_fu_502_p2[11:0];

assign trunc_ln818_fu_244_p1 = i_fu_94[1:0];

assign u0_V_1_fu_276_p2 = (12'd0 - u0_V_fu_258_p4);

assign u0_V_3_fu_288_p3 = ((tmp_fu_268_p3[0:0] == 1'b1) ? u0_V_1_fu_276_p2 : u0_V_fu_258_p4);

assign u0_V_fu_258_p4 = {{tmp_1_fu_248_p6[15:4]}};

assign zext_ln1273_fu_220_p1 = half_period_V_fu_216_p1;

assign zext_ln48_fu_367_p1 = ret_duty_V_3_4_fu_110;

always @ (posedge ap_clk) begin
    zext_ln1273_reg_561[26:15] <= 12'b000000000000;
end

endmodule //servo_u_to_duty
